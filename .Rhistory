return(RMSE(predicted_ratings, test_set$rating))
})
lambda_values <- seq(0, 7, .2)
RMSE_function_reg <- sapply(lambda_values, function(l){
mu <- mean(training_set$rating)
b_i <- training_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- training_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - mu - b_i)/(n()+l))
predicted_ratings <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
rmse_table %>% knitr::kable(caption = "RMSEs")
lambda_values <- seq(0, 7, .2)
RMSE_function_reg <- sapply(lambda_values, function(l){
mu <- mean(training_set$rating)
movie_avgs <- training_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avgs <- training_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - mu - b_i)/(n()+l))
predicted_ratings <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
RMSE_function_reg <- sapply(lambda_values, function(l){
mu <- mean(training_set$rating)
b_i <- training_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- training_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - mu - b_i)/(n()+l))
predicted_ratings <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
lambdas <- seq(0, 10, 0.25)
RMSE_reg <- sapply(lambdas, function(l){
mu_reg <- mean(edx$rating)
b_i_reg <- edx %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- edx %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings_b_i_u <-
validation %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(validation$rating,predicted_ratings_b_i_u))
})
lambdas <- seq(0, 10, 0.2)
RMSE_reg <- sapply(lambdas, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings_b_i_u <-
test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(validation$rating,predicted_ratings_b_i_u))
})
###################################
# Create edx set and validation set
###################################
# Note: this process could take a couple of minutes
# Installing and loading packages for data exploration, visualization, preprocessing,
# machine learning algorithms, and RMSE analysis
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("lubridate", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(knitr)) install.packages("knitr", repos = "http://cran.us.r-project.org")
if(!require(stargazer)) install.packages("stargazer", repos = "http://cran.us.r-project.org")
if(!require(e1071)) install.packages("e1071", repos = "http://cran.us.r-project.org")
if(!require(Matrix)) install.packages("e1071", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(caret)
library(data.table)
library(lubridate)
library(ggplot2)
library(knitr)
library(stargazer)
library(e1071)
library(Matrix)
# MovieLens 10M data table:
# https://grouplens.org/data tables/movielens/10m/
# http://files.grouplens.org/data tables/movielens/ml-10m.zip
# Since I am using using R 3.6.0 I downloaded edx.rds and validation.rds data tables from
# HarvardX_Capstone_MovieLens Google Drive
# https://drive.google.com/drive/folders/1IZcBBX0OmL9wu9AdzMBFUG8GoPbGQ38D
movielens <- readRDS("edx.rds", refhook = NULL)
validation <- readRDS("validation.rds", refhook = NULL)
# Validation set will be 10% of MovieLens data
# if using R 3.6.0: set.seed(1, sample.kind = "Rounding")
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
# Data exploration of MovieLens edx data table
edx_stats <- stargazer(edx, type = "text", title="Descriptive edx data table statistics/selected variables", digits=1, out="edx_stats.txt")
edx_stats
edx_unique <- data.table(edx %>% summarize(users = n_distinct(userId),
movies = n_distinct(movieId)))
kable(edx_unique, caption = "Edx set - unique userIds and movieIds")
# Data exploration of MovieLens validation data table
val_stats <- stargazer(validation, type = "text", title="Descriptive validation data table statistics/selected variables", digits=1, out="edx_stats.txt")
val_stats
val_unique <- data.table(validation %>% summarize(users = n_distinct(userId),
movies = n_distinct(movieId)))
kable(val_unique, caption = "Validation set - unique userIds and movieIds")
# The edx and validation data tables contain a timestamp field for when the user rating was
# provided in seconds since Jan. 1, 1970
# I used the as_datetime function in the lubridate package to mutate in the right format
# I then created a scatterplot of y = average ratings vs x  = date and added geom_smooth
# option for improved visualization of the trend
edx <- data.table(edx)
edx$timestamp <- as_datetime(edx$timestamp)
validation <- data.table(validation)
validation$timestamp <- as_datetime(validation$timestamp)
edx %>%
mutate(date = round_date(timestamp, unit = "month")) %>%
group_by(date) %>%
summarize(rating = mean(rating)) %>%
ggplot(aes(date, rating)) +
geom_point() +
geom_smooth() +
ggtitle("Timestamp of movie ratings by month")+
labs(subtitle = "average ratings",
caption = "source data : edx data table")
# Bar chart of user ratings by movie genre for the edx data table
movie_genre <- edx %>% separate_rows(genres, sep = "\\|") %>%
group_by(genres) %>%
summarize(count = n()) %>%
arrange(desc(count))
movie_genre <- data.table(movie_genre)
movie_genre <- movie_genre[order(-count),]
ggplot(data=movie_genre, aes(x=reorder(movie_genre$genres,movie_genre$count),
y=sapply(movie_genre$count, function(y) y/1000000),
fill=I("blue"))) +
geom_bar(position="dodge",stat="identity") +
coord_flip() +
labs(x="movie genre", y="number of user ratings in millions",
caption = "source data: MovieLens edx data table") +
ggtitle("User ratings by movie genre")
# Histogram of movie ratings grouped by whole star and half star ratings for the edx
# data table
group <-  ifelse((edx$rating == 1 |edx$rating == 2 | edx$rating == 3 |
edx$rating == 4 | edx$rating == 5) ,
"whole_star",
"half_star")
edx_ratings <- data.table(edx$rating, group)
ggplot(edx_ratings, aes(x= edx$rating, fill = group)) +
geom_histogram( binwidth = 0.2) +
scale_x_continuous(breaks=seq(0, 5, by= 0.5)) +
scale_fill_manual(values = c("half_star"="maroon", "whole_star"="gold")) +
labs(x="movie rating", y="number of user ratings",
caption = "source data: MovieLens edx data table") +
ggtitle("Histogram of movie ratings")
# Create top_movies data table from edx data table which contains the top 10 movies
# by number of user ratings
top_movies <- edx %>%
group_by(title) %>%
summarize(count=n()) %>%
top_n(10,count) %>%
arrange(desc(count))
# Bar chart of top_movies
top_movies %>%
ggplot(aes(x=reorder(title, count), y=count)) +
geom_bar(stat='identity', fill="dark green") + coord_flip(y=c(0, 30000)) +
labs(x="", y="Number of ratings") +
geom_text(aes(label= count), hjust=-0.1, size=3) +
labs(title="Top 10 movies based \n on number of user ratings" ,
caption = "source data: edx data table")
# As described in the data exploration process, the columns userId and movieId
# should be treated as factors for some modeling purposes. To perform this
# transformation we make a copy of the edx training set to keep the original.
training_set <- edx
training_set$userId <- as.factor(training_set$userId)
training_set$movieId <- as.factor(training_set$movieId)
# I add a column to the training_set for date which is the month and year for the rating and
# set it as a factor
training_set <- training_set %>%
mutate(date = round_date(as_datetime(timestamp), unit = "month"))
training_set$date <- as.factor(training_set$date)
# Due to the large size of the edx data table I used training set
# columns userId, movieId, date, and ratings for regression models.
training_set <- training_set %>% select(userId, movieId, date, rating)
# Transform validation set with columns userId, movieId, date, and rating same as training set
test_set <- validation
test_set$userId <- as.factor(test_set$userId)
test_set$movieId <- as.factor(validation$movieId)
test_set <- test_set %>%
mutate(date = round_date(as_datetime(timestamp), unit = "month"))
test_set$date <- as.factor(test_set$date)
test_set <- test_set %>% select(userId, movieId, date, rating)
# Baseline using average rating across all movies
mu_hat_baseline <- mean(training_set$rating)
RMSE_baseline <- RMSE(test_set$rating, mu_hat_baseline)
RMSE_baseline
rmse_table <- data_frame(Method = "Baseline using average rating across all movies", RMSE = RMSE_baseline)
rmse_table %>% knitr::kable(caption = "RMSEs")
# Fitting Regression models to the edx training set using userId and movieId
# as dependent variables x and rating as the predicted variable y.
# Predicted movie ratings regression model using movieId averages
# The average of all movie ratings of the training set
mu <- mean(training_set$rating)
# calculate movie_avgs on the training set
movie_avgs <- training_set %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
# predicted ratings
predicted_ratings_bi <- mu + test_set %>%
left_join(movie_avgs, by='movieId') %>%
.$b_i
model_RMSE <- RMSE(predicted_ratings_bi, test_set$rating)
model_RMSE
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Predicted movie ratings regression model using both movieId and userId averages
user_avgs <- training_set  %>%
left_join(movie_avgs, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
predicted_ratings_bu <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
model_RMSE <- RMSE(predicted_ratings_bu, test_set$rating)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId and userid averages", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Predicted movie ratings regression model using both movieId and userId averages and date
time_avgs <- training_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
group_by(date) %>%
summarize(b_t = mean(rating - mu - b_i - b_u))
# predicted ratings
predicted_ratings_bt <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
left_join(time_avgs, by='date') %>%
mutate(pred = mu + b_i + b_u + b_t) %>%
.$pred
model_RMSE <- RMSE(predicted_ratings_bt, test$rating)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId, userid, and timestamp averages", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Regularization using movieId and userId
lambdas <- seq(0, 10, 0.2)
RMSE_reg <- sapply(lambdas, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings_b_i_u <-
test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(validation$rating,predicted_ratings_b_i_u))
})
lambdas <- seq(0, 10, 0.2)
RMSE_reg <- sapply(lambdas, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings <- test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(test_set$rating,predicted_ratings))
})
lambda_values <- seq(0, 10, 0.2)
RMSE_reg <- sapply(lambdas, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings <- test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(test_set$rating,predicted_ratings))
})
lambda_values <- seq(0, 10, 0.25)
RMSE_reg <- sapply(lambdas, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings <- test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(test_set$rating,predicted_ratings))
})
lambda_values <- seq(0, 10, 0.25)
RMSE_reg <- sapply(lambda_values, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings_reg <- test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(test_set$rating,predicted_ratings_reg))
})
qplot(lambda_values, RMSE_reg,
main = "Regularization",
xlab = "RMSE", ylab = "Lambda") # lambda vs RMSE
lambda_opt <- lambda_values[which.min(RMSE_reg)]
lambda_opt # Lambda which minimizes RMSE
rmse_table <- rbind(rmse_table,
data_frame(Method = "Regularization of ratings regression prediction model using movieId and userid averages",
RMSE = min(RMSE_reg)))
rmse_table %>% knitr::kable(caption = "RMSEs")
qplot(lambda_values, RMSE_reg,
main = "Regularization",
xlab = "lambda", ylab = "RMSE") # lambda vs RMSE
lambda_opt <- lambda_values[which.min(RMSE_reg)]
lambda_opt # lambda which optimizes the model (minimizes RMSE)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Regularization of ratings regression prediction model using movieId and userid averages",
RMSE = min(RMSE_reg)))
rmse_table %>% knitr::kable(caption = "RMSEs")
time_avgs <- training_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
group_by(date) %>%
summarize(b_t = mean(rating - mu - b_i - b_u))
# predicted ratings
predicted_ratings_bt <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
left_join(time_avgs, by='date') %>%
mutate(pred = mu + b_i + b_u + b_t) %>%
.$pred
model_RMSE <- RMSE(predicted_ratings_bt, test$rating)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId, userid, and date averages", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
model_RMSE <- RMSE(predicted_ratings_bt, test_set$rating)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId, userid, and date averages", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Baseline using average rating across all movies
mu_hat_baseline <- mean(training_set$rating)
RMSE_baseline <- RMSE(test_set$rating, mu_hat_baseline)
RMSE_baseline
rmse_table <- data_frame(Method = "Baseline using average rating across all movies", RMSE = RMSE_baseline)
rmse_table %>% knitr::kable(caption = "RMSEs")
# Fitting Regression models to the edx training set using userId and movieId
# as dependent variables x and rating as the predicted variable y.
# Predicted movie ratings regression model using movieId averages
# The average of all movie ratings of the training set
mu <- mean(training_set$rating)
# calculate movie_avgs on the training set
movie_avgs <- training_set %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
# predicted ratings
predicted_ratings_bi <- mu + test_set %>%
left_join(movie_avgs, by='movieId') %>%
.$b_i
model_RMSE <- RMSE(predicted_ratings_bi, test_set$rating)
model_RMSE
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Predicted movie ratings regression model using both movieId and userId averages
user_avgs <- training_set  %>%
left_join(movie_avgs, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
predicted_ratings_bu <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
model_RMSE <- RMSE(predicted_ratings_bu, test_set$rating)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId and userid averages", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Predicted movie ratings regression model using both movieId and userId averages and date
time_avgs <- training_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
group_by(date) %>%
summarize(b_t = mean(rating - mu - b_i - b_u))
# predicted ratings
predicted_ratings_bt <- test_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
left_join(time_avgs, by='date') %>%
mutate(pred = mu + b_i + b_u + b_t) %>%
.$pred
model_RMSE <- RMSE(predicted_ratings_bt, test_set$rating)
rmse_table <- rbind(rmse_table,
data_frame(Method = "Predicted movie ratings regression model using movieId, userid, and date averages", RMSE = model_RMSE))
rmse_table %>% knitr::kable(caption = "RMSEs")
# Regularization using movieId and userId regression prediction model
lambda_values <- seq(0, 10, 0.25)
RMSE_reg <- sapply(lambda_values, function(l){
mu_reg <- mean(training_set$rating)
b_i_reg <- training_set %>%
group_by(movieId) %>%
summarize(b_i_reg = sum(rating - mu_reg)/(n()+l))
b_u_reg <- training_set %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u_reg = sum(rating - b_i_reg - mu_reg)/(n()+l))
predicted_ratings_reg <- test_set %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu_reg + b_i_reg + b_u_reg) %>%
.$pred
return(RMSE(test_set$rating,predicted_ratings_reg))
})
qplot(lambda_values, RMSE_reg,
main = "Regularization",
xlab = "lambda", ylab = "RMSE") # lambda vs RMSE
lambda_opt <- lambda_values[which.min(RMSE_reg)]
lambda_opt # lambda which optimizes the model (minimizes RMSE) which is 5.0
rmse_table <- rbind(rmse_table,
data_frame(Method = "Regularization of ratings regression prediction model using movieId and userid averages",
RMSE = min(RMSE_reg)))
rmse_table %>% knitr::kable(caption = "RMSEs")
install.packages("tex")
install.packages("MiKTex")
setwd("C:/Users/justinn/Box/Data Science Programs/Harvardx Data Science Program/Capstone/HarvardX_Capstone_MovieLens/Harvard_Data_Science_MovieLens/Harvard_Data_Science_MovieLens")
unlink('MovieLensReport_cache', recursive = TRUE)
remove.packages("tinytex")
remove.packages("rmarkdown")
tinytex::pdflatex('MovieLensReport.tex')
install.packages("latexextra")
tinytex::pdflatex('MovieLensReport.tex')
tlmgr_update()
library(tinytex)
tlmgr_install('multirow')
tlmgr_update()
tinytex::pdflatex('MovieLensReport.tex')
tlmgr_search('/multirow.sty')
tinytex::reinstall_tinytex()
tinytex::pdflatex('MovieLensReport.tex')
setwd("~/Data Science Programs/Harvardx Data Science Program/Capstone/Harvard_Data_Science_MovieLens")
